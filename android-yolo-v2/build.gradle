// This file provides basic support for building the TensorFlow demo
// in Android Studio with Gradle.
//
// Note that Bazel is still used by default to compile the native libs,
// and should be installed at the location noted below. This build file
// automates the process of calling out to it and copying the compiled
// libraries back into the appropriate directory.
//
// Alternatively, experimental support for Makefile builds is provided by
// setting buildWithMake below to true. This will allow building the demo
// on Windows machines, but note that full equivalence with the Bazel
// build is not yet guaranteed. See comments below for caveats and tips
// for speeding up the build, such as as enabling ccache.
project.buildDir = 'gradleBuild'
getProject().setBuildDir('gradleBuild')
project.ext.ASSET_DIR = projectDir.toString() + '/assets'
//assert file(project.ext.ASSET_DIR + "/tiny-yolo-voc-graph.pb").exists()
//assert file(project.ext.ASSET_DIR + "/tiny-yolo-voc-labels.txt").exists()
//assert file(project.ext.ASSET_DIR + "/yolov2-tiny-voc.pb").exists()
//assert file(project.ext.ASSET_DIR + "/tiny-yolo-voc-labels_rsp.txt").exists()

buildscript {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath 'com.google.ar.sceneform:plugin:1.12.0'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
    }
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.computergraphics.rock_paper_scissors"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility 1.8d
        sourceCompatibility 1.8
    }
    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
            // Android demo app sources.
            java {
                srcDir 'src'
            }

            manifest.srcFile 'AndroidManifest.xml'
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = [project.ext.ASSET_DIR]

            repositories {
                jcenter()
            }

            dependencies {
                implementation 'org.tensorflow:tensorflow-android:1.6.0'
            }

        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
repositories {
    google()
}
dependencies {
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    // Sceneform
    implementation "com.google.ar.sceneform.ux:sceneform-ux:1.12.0"
    implementation "com.google.ar.sceneform:animation:1.12.0"
    implementation 'com.android.support:design:28.0.0'

    // yolo
    implementation 'org.apache.commons:commons-math3:3.2'
}

apply plugin: 'com.google.ar.sceneform.plugin'

sceneform.asset('sampledata/models/andy_dance.fbx',
        'default',
        'sampledata/models/andy_dance.sfa',
        'src/main/res/raw/andy_dance',
        ['sampledata/models/andy_wave_r.fbx', 'sampledata/models/andy_wave_l.fbx'])

sceneform.asset('sampledata/models/baseball-cap.gltf',
        'default',
        'sampledata/models/baseball-cap.sfa',
        'src/main/res/raw/baseball_cap')

// ÏÜê
sceneform.asset('sampledata/models/pm_hand.fbx',
        'default',
        'sampledata/models/pm_hand.sfa',
        'src/main/res/raw/pm_hand')